{"ast":null,"code":"import _objectSpread from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\Code\\\\React\\\\date-operations\\\\src\\\\containers\\\\DateOperations.js\";\nimport React, { Component } from 'react';\nimport Input from '../components/UI/Input/Input';\nimport classes from './DateOperations.css';\n\nvar DateOperations =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DateOperations, _Component);\n\n  function DateOperations() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DateOperations);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DateOperations)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: false,\n      dateForm: {\n        startDate: {\n          elementLabel: 'Start Date',\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'DD/MM/YYYY'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isDate: true\n          },\n          valid: false,\n          touched: false\n        },\n        endDate: {\n          elementLabel: 'End Date',\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'DD/MM/YYYY'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isDate: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isFormValid: false\n    };\n\n    _this.dateSubmitHandler = function (event) {\n      // To prevent the form from submitting\n      event.preventDefault();\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedForm = _objectSpread({}, _this.state.dateForm);\n\n      var updatedFormElement = _objectSpread({}, _this.state.dateForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedForm[inputIdentifier] = updatedFormElement;\n      var isFormValid = true;\n\n      for (var _inputIdentifier in updatedForm) {\n        isFormValid = updatedForm[_inputIdentifier].valid && isFormValid;\n      }\n\n      _this.setState({\n        dateForm: updatedForm,\n        isFormValid: isFormValid\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DateOperations, [{\n    key: \"checkFormValidity\",\n    value: function checkFormValidity(value, rules) {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.dateForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.dateForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.dateSubmitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          touched: formElement.config.touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        });\n      }), React.createElement(\"button\", {\n        onClick: this.dateSubmitHandler,\n        disabled: !this.state.isFormValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Submit\"));\n      return React.createElement(\"div\", {\n        className: classes.DateOperations,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.dateSubmitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Start Date: \"), React.createElement(\"input\", {\n        value: this.state.startDate,\n        placeholder: \"DD/MM/YYYY\",\n        onChange: function onChange(event) {\n          return _this2.inputChangedHandler(event, 'startDate');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"End Date: \"), React.createElement(\"input\", {\n        value: this.state.endDate,\n        placeholder: \"DD/MM/YYYY\",\n        onChange: function onChange(event) {\n          return _this2.inputChangedHandler(event, 'endDate');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DateOperations;\n}(Component);\n\nexport default DateOperations;","map":{"version":3,"sources":["E:\\Code\\React\\date-operations\\src\\containers\\DateOperations.js"],"names":["React","Component","Input","classes","DateOperations","state","loading","dateForm","startDate","elementLabel","elementType","elementConfig","type","placeholder","value","validation","required","isDate","valid","touched","endDate","isFormValid","dateSubmitHandler","event","preventDefault","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","target","checkValidity","setState","rules","formElementsArray","key","push","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Input from '../components/UI/Input/Input';\r\nimport classes from './DateOperations.css';\r\n\r\nclass DateOperations extends Component {\r\n\r\n    state = {\r\n        loading: false,\r\n        dateForm: {\r\n            startDate: {\r\n                elementLabel: 'Start Date',\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'DD/MM/YYYY'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isDate: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n            },\r\n            endDate: {\r\n                elementLabel: 'End Date',\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'DD/MM/YYYY'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isDate: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isFormValid: false\r\n    };\r\n    // Method called on click of submit button\r\n    dateSubmitHandler = (event) => {\r\n        // To prevent the form from submitting\r\n        event.preventDefault();\r\n    };\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedForm = {\r\n            ...this.state.dateForm\r\n        };\r\n        const updatedFormElement = {\r\n            ...this.state.dateForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n\r\n        updatedForm[inputIdentifier] = updatedFormElement;\r\n        let isFormValid = true;\r\n        for (let inputIdentifier in updatedForm) {\r\n            isFormValid = updatedForm[inputIdentifier].valid && isFormValid;\r\n        }\r\n        this.setState({dateForm : updatedForm, isFormValid : isFormValid});\r\n\r\n    }\r\n    checkFormValidity(value, rules) {\r\n        return false;\r\n    }\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.dateForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.dateForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.dateSubmitHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input\r\n                        key= {formElement.id}\r\n                        elementType = {formElement.config.elementType}\r\n                        elementConfig = {formElement.config.elementConfig}\r\n                        value = {formElement.config.value}\r\n                        invalid = {!formElement.config.valid}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\r\n                ))}\r\n                <button onClick={this.dateSubmitHandler} disabled= {!this.state.isFormValid}>Submit</button>\r\n            </form>\r\n        );\r\n        return <div className={classes.DateOperations}>\r\n            <form onSubmit={this.dateSubmitHandler}>\r\n                <label>Start Date: </label>\r\n                <input\r\n                    value={this.state.startDate}\r\n                    placeholder=\"DD/MM/YYYY\"\r\n                    onChange={(event) => this.inputChangedHandler(event, 'startDate')} />\r\n                <br></br><br></br>\r\n                <label>End Date: </label>\r\n                <input value={this.state.endDate}\r\n                    placeholder=\"DD/MM/YYYY\"\r\n                    onChange={(event) => this.inputChangedHandler(event, 'endDate')} />\r\n                <br></br><br></br>\r\n                \r\n            </form>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default DateOperations;"]},"metadata":{},"sourceType":"module"}