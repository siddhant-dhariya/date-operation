{"ast":null,"code":"import _objectSpread from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Code\\\\React\\\\date-operations\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\Code\\\\React\\\\date-operations\\\\src\\\\containers\\\\DateOperations.js\";\nimport React, { Component } from 'react';\nimport Input from '../components/UI/Input/Input';\nimport classes from './DateOperations.css';\n\nvar DateOperations =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DateOperations, _Component);\n\n  function DateOperations() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DateOperations);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DateOperations)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: false,\n      dateForm: {\n        startDate: {\n          elementLabel: 'Start Date',\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'DD/MM/YYYY'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isDate: true\n          },\n          valid: false,\n          touched: false,\n          errorMsg: null\n        },\n        endDate: {\n          elementLabel: 'End Date',\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'DD/MM/YYYY'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isDate: true\n          },\n          valid: false,\n          touched: false,\n          errorMsg: null\n        }\n      },\n      isFormValid: false,\n      result: null\n    };\n\n    _this.dateSubmitHandler = function (event) {\n      // To prevent the form from submitting\n      event.preventDefault();\n\n      if (_this.state.isFormValid) {\n        var date1 = new Date(\"7/10/2010\");\n        var date2 = new Date(\"10/10/2010\");\n        var timeDiff = Math.abs(date2.getTime() - date1.getTime());\n        var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        var diff = Math.floor((Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate()) - Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate())) / (1000 * 60 * 60 * 24));\n        alert(diff);\n      }\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedForm = _objectSpread({}, _this.state.dateForm);\n\n      var updatedFormElement = _objectSpread({}, _this.state.dateForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = updatedFormElement.valid = _this.checkFormValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedForm[inputIdentifier] = updatedFormElement;\n      var isFormValid = true;\n\n      for (var _inputIdentifier in updatedForm) {\n        isFormValid = updatedForm[_inputIdentifier].valid && isFormValid;\n      }\n\n      _this.setState({\n        dateForm: updatedForm,\n        isFormValid: isFormValid\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DateOperations, [{\n    key: \"checkFormValidity\",\n    value: function checkFormValidity(value, rules) {\n      var isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.isDate) {\n        isValid = this.validateDate(value);\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"validateDate\",\n    value: function validateDate(value) {\n      // regular expression to match required date format\n      var regex = /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/;\n\n      if (value !== '') {\n        var regs = value.match(regex);\n        console.log('regs ', regs);\n\n        if (value.match(regex)) {\n          // day value between 1 and 31\n          if (regs[1] < 1 || regs[1] > 31) {\n            alert(\"Invalid value for day: \" + regs[1]);\n            return false;\n          } // month value between 1 and 12\n\n\n          if (regs[2] < 1 || regs[2] > 12) {\n            alert(\"Invalid value for month: \" + regs[2]);\n            return false;\n          } // year value between 1902 and 2019\n\n\n          if (regs[3] < 1900 || regs[3] > new Date().getFullYear()) {\n            alert(\"Invalid value for year: \" + regs[3] + \" - must be between 1902 and \" + new Date().getFullYear());\n            return false;\n          }\n        } else {\n          alert(\"Invalid date format: \" + value);\n          return false;\n        }\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.dateForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.dateForm[key]\n        });\n      }\n\n      var resultDiv = null;\n\n      if (this.state.result) {\n        resultDiv = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"Time difference in days: \"), this.state.result);\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.dateSubmitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          invalid: !formElement.config.valid,\n          touched: formElement.config.touched,\n          label: formElement.config.elementLabel,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        });\n      }), React.createElement(\"button\", {\n        onClick: this.dateSubmitHandler,\n        disabled: !this.state.isFormValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Submit\"));\n      return React.createElement(\"div\", {\n        className: classes.DateOperations,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, form, resultDiv);\n    }\n  }]);\n\n  return DateOperations;\n}(Component);\n\nexport default DateOperations;","map":{"version":3,"sources":["E:\\Code\\React\\date-operations\\src\\containers\\DateOperations.js"],"names":["React","Component","Input","classes","DateOperations","state","loading","dateForm","startDate","elementLabel","elementType","elementConfig","type","placeholder","value","validation","required","isDate","valid","touched","errorMsg","endDate","isFormValid","result","dateSubmitHandler","event","preventDefault","date1","Date","date2","timeDiff","Math","abs","getTime","diffDays","ceil","diff","floor","UTC","getFullYear","getMonth","getDate","alert","inputChangedHandler","inputIdentifier","updatedForm","updatedFormElement","target","checkFormValidity","setState","rules","isValid","trim","validateDate","regex","regs","match","console","log","formElementsArray","key","push","id","config","resultDiv","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Input from '../components/UI/Input/Input';\r\nimport classes from './DateOperations.css';\r\n\r\nclass DateOperations extends Component {\r\n\r\n    state = {\r\n        loading: false,\r\n        dateForm: {\r\n            startDate: {\r\n                elementLabel: 'Start Date',\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'DD/MM/YYYY'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isDate: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                errorMsg: null\r\n            },\r\n            endDate: {\r\n                elementLabel: 'End Date',\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'DD/MM/YYYY'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isDate: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                errorMsg: null\r\n            }\r\n        },\r\n        isFormValid: false,\r\n        result: null\r\n    };\r\n    // Method called on click of submit button\r\n    dateSubmitHandler = (event) => {\r\n        // To prevent the form from submitting\r\n        event.preventDefault();\r\n        if (this.state.isFormValid) {\r\n            const date1 = new Date(\"7/10/2010\");\r\n            const date2 = new Date(\"10/10/2010\");\r\n            const timeDiff = Math.abs(date2.getTime() - date1.getTime());\r\n            const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\r\n\r\n            const diff = Math.floor((Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate()) - Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate()) ) /(1000 * 60 * 60 * 24));\r\n            alert(diff);\r\n        }\r\n    };\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedForm = {\r\n            ...this.state.dateForm\r\n        };\r\n        const updatedFormElement = {\r\n            ...this.state.dateForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = updatedFormElement.valid = this.checkFormValidity(updatedFormElement.value, updatedFormElement.validation);\r\n\r\n        updatedForm[inputIdentifier] = updatedFormElement;\r\n        let isFormValid = true;\r\n        for (let inputIdentifier in updatedForm) {\r\n            isFormValid = updatedForm[inputIdentifier].valid && isFormValid;\r\n        }\r\n        this.setState({ dateForm: updatedForm, isFormValid: isFormValid });\r\n\r\n    }\r\n    checkFormValidity(value, rules) {\r\n        let isValid = true;\r\n        if (!rules) {\r\n            return true;\r\n        }\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n        if (rules.isDate) {\r\n            isValid = this.validateDate(value);\r\n\r\n        }\r\n        return isValid;\r\n    }\r\n    validateDate(value) {\r\n        // regular expression to match required date format\r\n        const regex = /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/;\r\n        if (value !== '') {\r\n            let regs = value.match(regex);\r\n            console.log('regs ', regs);\r\n            if (value.match(regex)) {\r\n                // day value between 1 and 31\r\n                if (regs[1] < 1 || regs[1] > 31) {\r\n                    alert(\"Invalid value for day: \" + regs[1]);\r\n                    return false;\r\n                }\r\n                // month value between 1 and 12\r\n                if (regs[2] < 1 || regs[2] > 12) {\r\n                    alert(\"Invalid value for month: \" + regs[2]);\r\n                    return false;\r\n                }\r\n                // year value between 1902 and 2019\r\n                if (regs[3] < 1900 || regs[3] > (new Date()).getFullYear()) {\r\n                    alert(\"Invalid value for year: \" + regs[3] + \" - must be between 1902 and \" + (new Date()).getFullYear());\r\n                    return false;\r\n                }\r\n            } else {\r\n                alert(\"Invalid date format: \" + value);\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.dateForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.dateForm[key]\r\n            });\r\n        }\r\n        let resultDiv = null;\r\n        if (this.state.result) {\r\n            resultDiv = <div><label>Time difference in days: </label>{this.state.result}</div>;\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.dateSubmitHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        touched={formElement.config.touched}\r\n                        label={formElement.config.elementLabel}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <button onClick={this.dateSubmitHandler} disabled={!this.state.isFormValid}>Submit</button>\r\n            </form>\r\n        );\r\n        return <div className={classes.DateOperations}>\r\n            {form}\r\n            {resultDiv}\r\n            {/* <form onSubmit={this.dateSubmitHandler}>\r\n                <label>Start Date: </label>\r\n                <input\r\n                    value={this.state.startDate}\r\n                    placeholder=\"DD/MM/YYYY\"\r\n                    onChange={(event) => this.inputChangedHandler(event, 'startDate')} />\r\n                <br></br><br></br>\r\n                <label>End Date: </label>\r\n                <input value={this.state.endDate}\r\n                    placeholder=\"DD/MM/YYYY\"\r\n                    onChange={(event) => this.inputChangedHandler(event, 'endDate')} />\r\n                <br></br><br></br>\r\n                \r\n            </form> */}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default DateOperations;"]},"metadata":{},"sourceType":"module"}